package com.jbond.app;

import java.util.HashMap;
import java.util.Map;

public class GalileoTagTable {
    private final Map<Byte, TagDescr> table;

    public GalileoTagTable() {
        this.table = new HashMap<>();
        table.put((byte) 0x01, new TagDescr(1, "uint"));
        table.put((byte) 0x02, new TagDescr(1, "uint"));
        table.put((byte) 0x03, new TagDescr(15, "string"));
        table.put((byte) 0x04, new TagDescr(2, "uint"));
        table.put((byte) 0x10, new TagDescr(2, "uint"));
        table.put((byte) 0x20, new TagDescr(4, "time"));
        table.put((byte) 0x30, new TagDescr(9, "coord"));
        table.put((byte) 0x33, new TagDescr(4, "speed"));
        table.put((byte) 0x34, new TagDescr(2, "uint"));
        table.put((byte) 0x35, new TagDescr(1, "uint"));
        table.put((byte) 0x40, new TagDescr(2, "uint"));
        table.put((byte) 0x41, new TagDescr(2, "uint"));
        table.put((byte) 0x42, new TagDescr(2, "uint"));
        table.put((byte) 0x43, new TagDescr(1, "uint"));
        table.put((byte) 0x44, new TagDescr(4, "accel"));
        table.put((byte) 0x45, new TagDescr(2, "bitstring"));
        table.put((byte) 0x46, new TagDescr(2, "bitstring"));
        table.put((byte) 0x48, new TagDescr(2, "bitstring"));
        table.put((byte) 0x50, new TagDescr(2, "uint"));
        table.put((byte) 0x51, new TagDescr(2, "uint"));
        table.put((byte) 0x52, new TagDescr(2, "uint"));
        table.put((byte) 0x53, new TagDescr(2, "uint"));
        table.put((byte) 0x54, new TagDescr(2, "uint"));
        table.put((byte) 0x55, new TagDescr(2, "uint"));
        table.put((byte) 0x56, new TagDescr(2, "uint"));
        table.put((byte) 0x57, new TagDescr(2, "uint"));
        table.put((byte) 0x58, new TagDescr(2, "bytearr"));
        table.put((byte) 0x59, new TagDescr(2, "bytearr"));
        table.put((byte) 0x5A, new TagDescr(4, "uint"));
        table.put((byte) 0x60, new TagDescr(2, "dut2b"));
        table.put((byte) 0x61, new TagDescr(2, "dut2b"));
        table.put((byte) 0x62, new TagDescr(2, "dut2b"));
        table.put((byte) 0x63, new TagDescr(3, "dut3b"));
        table.put((byte) 0x64, new TagDescr(3, "dut3b"));
        table.put((byte) 0x65, new TagDescr(3, "dut3b"));
        table.put((byte) 0x66, new TagDescr(3, "dut3b"));
        table.put((byte) 0x67, new TagDescr(3, "dut3b"));
        table.put((byte) 0x68, new TagDescr(3, "dut3b"));
        table.put((byte) 0x69, new TagDescr(3, "dut3b"));
        table.put((byte) 0x6A, new TagDescr(3, "dut3b"));
        table.put((byte) 0x6B, new TagDescr(3, "dut3b"));
        table.put((byte) 0x6C, new TagDescr(3, "dut3b"));
        table.put((byte) 0x6D, new TagDescr(3, "dut3b"));
        table.put((byte) 0x6E, new TagDescr(3, "dut3b"));
        table.put((byte) 0x6F, new TagDescr(3, "dut3b"));
        table.put((byte) 0x70, new TagDescr(2, "tempsens"));
        table.put((byte) 0x71, new TagDescr(2, "tempsens"));
        table.put((byte) 0x72, new TagDescr(2, "tempsens"));
        table.put((byte) 0x73, new TagDescr(2, "tempsens"));
        table.put((byte) 0x74, new TagDescr(2, "tempsens"));
        table.put((byte) 0x75, new TagDescr(2, "tempsens"));
        table.put((byte) 0x76, new TagDescr(2, "tempsens"));
        table.put((byte) 0x77, new TagDescr(2, "tempsens"));
        table.put((byte) 0x78, new TagDescr(2, "uint"));
        table.put((byte) 0x79, new TagDescr(2, "uint"));
        table.put((byte) 0x80, new TagDescr(3, "ds1923"));
        table.put((byte) 0x81, new TagDescr(3, "ds1923"));
        table.put((byte) 0x82, new TagDescr(3, "ds1923"));
        table.put((byte) 0x83, new TagDescr(3, "ds1923"));
        table.put((byte) 0x84, new TagDescr(3, "ds1923"));
        table.put((byte) 0x85, new TagDescr(3, "ds1923"));
        table.put((byte) 0x86, new TagDescr(3, "ds1923"));
        table.put((byte) 0x87, new TagDescr(3, "ds1923"));
        table.put((byte) 0x88, new TagDescr(1, "uint"));
        table.put((byte) 0x89, new TagDescr(1, "uint"));
        table.put((byte) 0x8A, new TagDescr(1, "uint"));
        table.put((byte) 0x8B, new TagDescr(1, "uint"));
        table.put((byte) 0x8C, new TagDescr(1, "uint"));
        table.put((byte) 0x90, new TagDescr(4, "uint"));
        table.put((byte) 0xA0, new TagDescr(1, "can1b"));
        table.put((byte) 0xA1, new TagDescr(1, "can1b"));
        table.put((byte) 0xA2, new TagDescr(1, "can1b"));
        table.put((byte) 0xA3, new TagDescr(1, "can1b"));
        table.put((byte) 0xA4, new TagDescr(1, "can1b"));
        table.put((byte) 0xA5, new TagDescr(1, "can1b"));
        table.put((byte) 0xA6, new TagDescr(1, "can1b"));
        table.put((byte) 0xA7, new TagDescr(1, "can1b"));
        table.put((byte) 0xA8, new TagDescr(1, "can1b"));
        table.put((byte) 0xA9, new TagDescr(1, "can1b"));
        table.put((byte) 0xAA, new TagDescr(1, "can1b"));
        table.put((byte) 0xAB, new TagDescr(1, "can1b"));
        table.put((byte) 0xAC, new TagDescr(1, "can1b"));
        table.put((byte) 0xAD, new TagDescr(1, "can1b"));
        table.put((byte) 0xAE, new TagDescr(1, "can1b"));
        table.put((byte) 0xAF, new TagDescr(1, "can1b"));
        table.put((byte) 0xB0, new TagDescr(2, "can2b"));
        table.put((byte) 0xB1, new TagDescr(2, "can2b"));
        table.put((byte) 0xB2, new TagDescr(2, "can2b"));
        table.put((byte) 0xB3, new TagDescr(2, "can2b"));
        table.put((byte) 0xB4, new TagDescr(2, "can2b"));
        table.put((byte) 0xB5, new TagDescr(2, "can2b"));
        table.put((byte) 0xB6, new TagDescr(2, "can2b"));
        table.put((byte) 0xB7, new TagDescr(2, "can2b"));
        table.put((byte) 0xB8, new TagDescr(2, "can2b"));
        table.put((byte) 0xB9, new TagDescr(2, "can2b"));
        table.put((byte) 0xF0, new TagDescr(4, "can4b"));
        table.put((byte) 0xF1, new TagDescr(4, "can4b"));
        table.put((byte) 0xF2, new TagDescr(4, "can4b"));
        table.put((byte) 0xF3, new TagDescr(4, "can4b"));
        table.put((byte) 0xF4, new TagDescr(4, "can4b"));
        table.put((byte) 0xF5, new TagDescr(4, "can4b"));
        table.put((byte) 0xF6, new TagDescr(4, "can4b"));
        table.put((byte) 0xF7, new TagDescr(4, "can4b"));
        table.put((byte) 0xF8, new TagDescr(4, "can4b"));
        table.put((byte) 0xF9, new TagDescr(4, "can4b"));
        table.put((byte) 0xC0, new TagDescr(4, "can_a0"));
        table.put((byte) 0xC1, new TagDescr(4, "can_a1"));
        table.put((byte) 0xC2, new TagDescr(4, "can_b0"));
        table.put((byte) 0xC3, new TagDescr(4, "can_b1"));
        table.put((byte) 0xC4, new TagDescr(1, "can1b"));
        table.put((byte) 0xC5, new TagDescr(1, "can1b"));
        table.put((byte) 0xC6, new TagDescr(1, "can1b"));
        table.put((byte) 0xC7, new TagDescr(1, "can1b"));
        table.put((byte) 0xC8, new TagDescr(1, "can1b"));
        table.put((byte) 0xC9, new TagDescr(1, "can1b"));
        table.put((byte) 0xCA, new TagDescr(1, "can1b"));
        table.put((byte) 0xCB, new TagDescr(1, "can1b"));
        table.put((byte) 0xCC, new TagDescr(1, "can1b"));
        table.put((byte) 0xCD, new TagDescr(1, "can1b"));
        table.put((byte) 0xCE, new TagDescr(1, "can1b"));
        table.put((byte) 0xCF, new TagDescr(1, "can1b"));
        table.put((byte) 0xD0, new TagDescr(1, "can1b"));
        table.put((byte) 0xD1, new TagDescr(1, "can1b"));
        table.put((byte) 0xD2, new TagDescr(1, "can1b"));
        table.put((byte) 0xD3, new TagDescr(4, "uint"));
        table.put((byte) 0xD4, new TagDescr(4, "uint"));
        table.put((byte) 0xD5, new TagDescr(1, "bitstring"));
        table.put((byte) 0xD6, new TagDescr(2, "can2b"));
        table.put((byte) 0xD7, new TagDescr(2, "can2b"));
        table.put((byte) 0xD8, new TagDescr(2, "can2b"));
        table.put((byte) 0xD9, new TagDescr(2, "can2b"));
        table.put((byte) 0xDA, new TagDescr(2, "can2b"));
        table.put((byte) 0xDB, new TagDescr(2, "can2b"));
        table.put((byte) 0xDD, new TagDescr(2, "can2b"));
        table.put((byte) 0xDE, new TagDescr(2, "can2b"));
        table.put((byte) 0xDF, new TagDescr(2, "can2b"));
        table.put((byte) 0xE2, new TagDescr(4, "bytearr"));
        table.put((byte) 0xE3, new TagDescr(4, "bytearr"));
        table.put((byte) 0xE4, new TagDescr(4, "bytearr"));
        table.put((byte) 0xE5, new TagDescr(4, "bytearr"));
        table.put((byte) 0xE6, new TagDescr(4, "bytearr"));
        table.put((byte) 0xE7, new TagDescr(4, "bytearr"));
        table.put((byte) 0xE8, new TagDescr(4, "bytearr"));
        table.put((byte) 0xE9, new TagDescr(4, "bytearr"));
        table.put((byte) 0xEA, new TagDescr(-1, "userdata"));
    }

    public TagDescr getTagDescr(byte tag) {
        try {
            return table.get(tag);
        } catch (ClassCastException ccex) {
            System.err.println(ccex.getMessage());
        } catch (NullPointerException npe) {
            System.err.println(npe.getMessage());
        }
        return null;
    }
}
